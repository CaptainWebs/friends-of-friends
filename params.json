{"name":"Friends-of-friends","tagline":"Friendship Mangement System for Mongoose","body":"# friends-of-friends \r\n[![Build Status](https://travis-ci.org/adminion/friends-of-friends.svg?branch=master)](https://travis-ci.org/adminion/friends-of-friends) \r\n[![Coverage Status](https://coveralls.io/repos/adminion/friends-of-friends/badge.svg?branch=master)](https://coveralls.io/r/adminion/friends-of-friends?branch=master)\r\n\r\n## Add Friendship Management to any Mongoose Schema\r\nUse friends-of-friends to add friend relationships to any existing mongoose schema.  Let's say you already have a collection of users and you want them to be able to setup friend relationships for use in building an ACL: friends-of-friends is your new best friend! \r\n\r\nFor details, see [API](#api) and [Usage](#usage) below.\r\n\r\n## Contributing\r\nI will happily accept contributions of bug-fixes and new features, but we'll need to discuss breaking changes.  If you make valuable contributions, I'll make you a collaborator :)\r\n\r\nSee the [Contribution Guide](/CONTRIBUTING.md) for more information on how to contribute, run tests, and generate coverage reports.\r\n\r\n## API\r\n\r\nAPI documentation is located in `doc/`\r\n\r\n## Installation\r\n\r\n    $ npm install friends-of-friends\r\n\r\n## Usage\r\n\r\n### Create a new FriendsOfFriends Object\r\n```javascript\r\n// mongoose is required\r\nvar mongoose = require('mongoose');\r\n\r\nvar FriendsOfFriends = require('friends-of-friends');\r\nvar fof = new FriendsOfFriends(mongoose);\r\n// works with or without 'new'\r\nvar FriendsOfFriends = require('friends-of-friends')(mongoose);\r\n```\r\n\r\n#### Default Configuration Options\r\n```javascript\r\nvar defaults = {\r\n    // define the name for your Users model.\r\n    personModelName:            'Person',\r\n    // define the name for the Friendship model\r\n    friendshipModelName:        'Friendship',\r\n    // define the name of the Friendship collection.\r\n    friendshipCollectionName:   'Friendships'\r\n}\r\n```\r\n\r\n### Specifying Configuration Options\r\n```javascript\r\nvar options = { \r\n    personModelName:            'Player',\r\n    friendshipModelName:        'Friend_Relationships', \r\n    friendshipCollectionName:   'foo_bar_userRelationships',\r\n};\r\n \r\nvar FriendsOfFriends = require('friends-of-friends');\r\nvar fof = new FriendsOfFriends(mongoose, options);\r\n// again, works with or without 'new'\r\nvar FriendsOfFriends = require('friends-of-friends')(mongoose, options);\r\n```\r\n\r\n### Plug-in friends-of-friends to User Schema\r\n```javascript\r\n// ...\r\n\r\n// you User schema\r\nvar UserSchema = new mongoose.Schema({\r\n    username: String\r\n});\r\n\r\n// apply the friends-of-friends mongoose plugin to your User schema\r\nUserSchema.plugin(friendsOfFriends.plugin, options);\r\n\r\n// compile your user model\r\nvar User = mongoose.model(options.personModelName), UserSchema);\r\n\r\n// create users\r\nvar Jeff = new User({ username: \"Jeff\" }),\r\n    Zane = new User({ username: \"Zane\"}),\r\n    Sam = new User({ username: \"Sam\"});\r\n\r\nconsole.log('Jeff', Jeff);\r\nconsole.log('Zane', Zane);\r\nconsole.log('Zane', Zane);\r\n\r\n// Jeff: { __v: 0, username: 'Jeff', _id: 54c6eb7cf2f9fe9672b90ba2 }\r\n// Zane: { __v: 0, username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3 }\r\n// Sam: { __v: 0, username: 'Sam', _id: 54c6eb7cf2f9fe9672b90ba4 }\r\n\r\n// connect to db\r\nmongoose.connect('mongodb://localhost/test');\r\n```\r\n\r\n### Use Plugged-in functionality\r\n\r\n#### Send Friend Requests \r\nJeff can ask Zane to be friends\r\n```javascript\r\nJeff.friendRequest(Zane._id, function (err, request) {\r\n    if (err) throw err;\r\n\r\n    console.log('request', request);\r\n    // request { __v: 0,\r\n    //   requester: { username: 'Jeff', _id: 54c6eb7cf2f9fe9672b90ba2, __v: 0 },\r\n    //   requested: { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 },\r\n    //   _id: 54c6eb7cf2f9fe9672b90ba4,\r\n    //   dateSent: Mon Jan 26 2015 17:35:56 GMT-0800 (PST),\r\n    //   status: 'Pending' }\r\n});\r\n```\r\n\r\n#### Deny Friend Requests\r\nZane could deny Jeff's Request...\r\n```javascript\r\nZane.denyRequest(Jeff._id, function (err, denied) {\r\n    if (err) throw err;\r\n\r\n    console.log('denied', denied);\r\n    // denied 1\r\n});\r\n```\r\n\r\n#### Accept Friend Requests\r\n... or Zane could accept Jeff's Request\r\n```javascript\r\nZane.acceptRequest(Jeff._id, function (err, friendship) {\r\n    if (err) throw err;\r\n\r\n    console.log('friendship', friendship);\r\n    // friendship { __v: 0,\r\n    //   _id: 54c6eb7cf2f9fe9672b90ba4,\r\n    //   dateAccepted: Mon Jan 26 2015 17:35:57 GMT-0800 (PST),\r\n    //   requested: { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 },\r\n    //   requester: { username: 'Jeff', _id: 54c6eb7cf2f9fe9672b90ba2, __v: 0 },\r\n    //   dateSent: Mon Jan 26 2015 17:35:56 GMT-0800 (PST),\r\n    //   status: 'Accepted' }\r\n});\r\n```\r\n\r\n#### Get Friends\r\nNow Jeff can get a list of his friends\r\n```javascript\r\n\r\n// Zane is now Jeff's friend\r\nJeff.getFriends(function (err, friends) {\r\n    if (err) throw err;\r\n\r\n    console.log('friends', friends);\r\n    // friends [ { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 } ]\r\n});\r\n```\r\n\r\n#### Get Friends Of Friends\r\nWhen two users are not friends, but have at least one friend in common, they are friends-of-friends\r\n```javascript\r\nZane.friendRequest(Sam._id, function (err, request) {\r\n    if (err) throw err;\r\n\r\n    console.log('request', request);\r\n    // request { __v: 0,\r\n    //   requester: { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 },\r\n    //   requested: { username: 'Sam', _id: 54c6eb7cf2f9fe9672b90ba4, __v: 0 },\r\n    //   _id: 54c6eb7cf2f9fe9672b90ba5,\r\n    //   dateSent: Mon Jan 26 2015 17:35:58 GMT-0800 (PST),\r\n    //   status: 'Pending' }\r\n    \r\n    Sam.acceptRequest(Zane._id, function (err, friendship) {\r\n        if (err) throw err;\r\n\r\n        console.log('friendship', friendship);\r\n        // friendship { __v: 0,\r\n        //   _id: 54c6eb7cf2f9fe9672b90ba5,\r\n        //   dateAccepted: Mon Jan 26 2015 17:35:59 GMT-0800 (PST),\r\n        //   requested: { username: 'Sam', _id: 54c6eb7cf2f9fe9672b90ba4, __v: 0 },\r\n        //   requester: { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 },\r\n        //   dateSent: Mon Jan 26 2015 17:35:58 GMT-0800 (PST),\r\n        //   status: 'Accepted' }\r\n    \r\n        Jeff.getFriendsOfFriends(function (err, friendsOfJeffsFriends) {\r\n            if (err) throw (err)\r\n\r\n            console.log('friendsOfJeffsFriends', friendsOfJeffsFriends);\r\n            // friendsOfJeffsFriends [ { username: 'Sam', _id: 54c6eb7cf2f9fe9672b90ba4, __v: 0 } ]\r\n        });\r\n    });\r\n});\r\n```\r\n\r\n## License\r\n\r\nCopyright (c) 2014-2015 Jeff Harris\r\n\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\r\n\r\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\r\n\r\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\r\n\r\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}