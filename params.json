{"name":"Friends-of-friends","tagline":"Friendship Mangement System for Mongoose","body":"# friends-of-friends \r\n## Friendship Mangement for Mongoose \r\n\r\n[![Build Status](https://travis-ci.org/adminion/friends-of-friends.svg?branch=master)](https://travis-ci.org/adminion/friends-of-friends) \r\n[![Coverage Status](https://coveralls.io/repos/adminion/friends-of-friends/badge.svg?branch=master)](https://coveralls.io/r/adminion/friends-of-friends?branch=master)\r\n\r\n## Installlation\r\n\r\n    $ npm install friends-of-friends\r\n\r\nIf you want run the tests, you should install with the `--dev` flag\r\n\r\n    $ npm install --dev friends-of-friends\r\n\r\n## Usage\r\n### Configuration\r\n```javascript\r\n\r\nvar options = { \r\n        // define the name for your Users model. Default: 'Account'\r\n        accountName: 'User',\r\n        // define the name for the relationships model. Default: 'Friendship'\r\n        friendshipName: 'Buddy'\r\n    };\r\n\r\n// create friendsOfFriends instance using the defined options\r\nvar friendsOfFriends = require('friends-of-friends')(options),\r\n\r\n```\r\n\r\n### Plugin friends-of-friends to User Schema\r\n\r\n```javascript\r\nvar mongoose = require('mongoose');\r\n\r\n// create you User schema\r\nvar UserSchema = new mongoose.Schema({\r\n    username: { type: String, unique: true }\r\n});\r\n\r\n// apply friends-of-friends plugin to your User schema\r\nUserSchema.plugin(friendsOfFriends.plugin, options);\r\n\r\n// compile your user model\r\nvar User = mongoose.model(options.accountName), UserSchema);\r\n\r\n// create two users\r\nvar Jeff = new User({ username: \"Jeff\" }),\r\n    Zane = new User({ username: \"Zane\"}),\r\n    Sam = new User({ username: \"Sam\"});\r\n\r\nconsole.log('Jeff', Jeff);\r\nconsole.log('Zane', Zane);\r\nconsole.log('Zane', Zane);\r\n\r\n// Jeff: { __v: 0, username: 'Jeff', _id: 54c6eb7cf2f9fe9672b90ba2 }\r\n// Zane: { __v: 0, username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3 }\r\n// Sam: { __v: 0, username: 'Sam', _id: 54c6eb7cf2f9fe9672b90ba4 }\r\n\r\n// connect to db\r\nmongoose.connect('mongodb://localhost/test');\r\n```\r\n\r\n### Use Plugged-in functionality\r\n\r\n#### Send Friend Requests \r\n```javascript\r\n// Jeff can ask Zane to be friends\r\nJeff.friendRequest(Zane._id, function (err, request) {\r\n    if (err) throw err;\r\n\r\n    console.log('request', request);\r\n    // request { __v: 0,\r\n    //   requester: { username: 'Jeff', _id: 54c6eb7cf2f9fe9672b90ba2, __v: 0 },\r\n    //   requested: { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 },\r\n    //   _id: 54c6eb7cf2f9fe9672b90ba4,\r\n    //   dateSent: Mon Jan 26 2015 17:35:56 GMT-0800 (PST),\r\n    //   status: 'Pending' }\r\n});\r\n```\r\n\r\n#### Accept Friend Requests\r\n```javascript\r\nZane.acceptRequest(users.jeff._id, function (err, friendship) {\r\n    if (err) throw err;\r\n\r\n    console.log('friendship', friendship);\r\n        // friendship { __v: 0,\r\n        //   _id: 54c6eb7cf2f9fe9672b90ba4,\r\n        //   dateAccepted: Mon Jan 26 2015 17:35:56 GMT-0800 (PST),\r\n        //   requested: { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 },\r\n        //   requester: { username: 'Jeff', _id: 54c6eb7cf2f9fe9672b90ba2, __v: 0 },\r\n        //   dateSent: Mon Jan 26 2015 17:35:56 GMT-0800 (PST),\r\n        //   status: 'Accepted' }\r\n});\r\n```\r\n\r\n#### Get Friends\r\n```javascript\r\n\r\n// Zane is now Jeff's friend\r\nJeff.getFriends(function (err, friends) {\r\n    if (err) throw err;\r\n\r\n    console.log('friends', friends);\r\n    // friends [ { username: 'Zane', _id: 54c6eb7cf2f9fe9672b90ba3, __v: 0 } ]\r\n});\r\n```\r\n\r\n## API\r\n\r\nYou may generate local docs (located in `docs/`) using `npm`\r\n\r\n    $ npm run docs\r\n\r\n**Classes**\r\n\r\n* [class: FriendshipModel](#FriendshipModel)\r\n  * [FriendshipModel.relationships](#FriendshipModel.relationships)\r\n  * [FriendshipModel.getRequests(accountId, done)](#FriendshipModel.getRequests)\r\n  * [FriendshipModel.getSentRequests(accountId, done)](#FriendshipModel.getSentRequests)\r\n  * [FriendshipModel.getReceivedRequests(accountId, done)](#FriendshipModel.getReceivedRequests)\r\n  * [FriendshipModel.acceptRequest(requesterId, requestedId, done)](#FriendshipModel.acceptRequest)\r\n  * [FriendshipModel.denyRequest(requesterId, requestedId, done)](#FriendshipModel.denyRequest)\r\n  * [FriendshipModel.getFriends(accountId, done)](#FriendshipModel.getFriends)\r\n  * [FriendshipModel.getFriendsOfFriends(accountId, done)](#FriendshipModel.getFriendsOfFriends)\r\n  * [FriendshipModel.areFriends(accountId1, accountId2, done)](#FriendshipModel.areFriends)\r\n  * [FriendshipModel.areFriendsOfFriends(accountId1, accountId2, done)](#FriendshipModel.areFriendsOfFriends)\r\n  * [FriendshipModel.getRelationship(accountId1, accountId2, done)](#FriendshipModel.getRelationship)\r\n  * [FriendshipModel.isRequester(friendshipId, accountId, done)](#FriendshipModel.isRequester)\r\n  * [FriendshipModel.isRequested(friendshipId, accountId, done)](#FriendshipModel.isRequested)\r\n* [class: FriendshipDocument](#FriendshipDocument)\r\n  * [FriendshipDocument.isRequester(accountId, done)](#FriendshipDocument.isRequester)\r\n  * [FriendshipDocument.isRequested(accountId, done)](#FriendshipDocument.isRequested)\r\n* [class: FriendsOfFriends](#FriendsOfFriends)\r\n  * [new FriendsOfFriends(options)](#new_FriendsOfFriends)\r\n  * [FriendsOfFriends.options](#FriendsOfFriends.options)\r\n  * [FriendsOfFriends.friendship](#FriendsOfFriends.friendship)\r\n  * [FriendsOfFriends.relationships](#FriendsOfFriends.relationships)\r\n  * [FriendsOfFriends.plugin(schema, options)](#FriendsOfFriends.plugin)\r\n  * [friendsOfFriends.get(property)](#FriendsOfFriends#get)\r\n  * [friendsOfFriends.set(property, value)](#FriendsOfFriends#set)\r\n* [class: AccountModel](#AccountModel)\r\n  * [AccountModel.getFriendship(accountId1, accountId2, done)](#AccountModel.getFriendship)\r\n  * [AccountModel.friendRequest(requesterId, requested_Id, done)](#AccountModel.friendRequest)\r\n  * [AccountModel.getRequests(accountId, done)](#AccountModel.getRequests)\r\n  * [AccountModel.getSentRequests(accountId, done)](#AccountModel.getSentRequests)\r\n  * [AccountModel.getReceivedRequests(accountId, done)](#AccountModel.getReceivedRequests)\r\n  * [AccountModel.acceptRequest(requesterId, requestedId, done)](#AccountModel.acceptRequest)\r\n  * [AccountModel.denyRequest(requesterId, requestedId, done)](#AccountModel.denyRequest)\r\n  * [AccountModel.endFriendship(accountId1, accountId2, done)](#AccountModel.endFriendship)\r\n  * [AccountModel.getFriends(accountId, done)](#AccountModel.getFriends)\r\n  * [AccountModel.getFriendsOfFriends(accountId, done)](#AccountModel.getFriendsOfFriends)\r\n  * [AccountModel.areFriends(accountId1, accountId2, done)](#AccountModel.areFriends)\r\n  * [AccountModel.areFriendsOfFriends(accountId1, accountId2, done)](#AccountModel.areFriendsOfFriends)\r\n  * [AccountModel.getFriendship(accountId1, accountId2, done)](#AccountModel.getFriendship)\r\n  * [AccountModel.getRelationship(accountId1, accountId2, done)](#AccountModel.getRelationship)\r\n  * [const: AccountModel.relationships](#AccountModel.relationships)\r\n* [class: AccountDocument](#AccountDocument)\r\n  * [new AccountDocument()](#new_AccountDocument)\r\n  * [AccountDocument.friendRequest(requestedId, done)](#AccountDocument.friendRequest)\r\n  * [AccountDocument.getRequests(done)](#AccountDocument.getRequests)\r\n  * [AccountDocument.getSentRequests(done)](#AccountDocument.getSentRequests)\r\n  * [AccountDocument.getReceivedRequests(done)](#AccountDocument.getReceivedRequests)\r\n  * [AccountDocument.acceptRequest(requesterId, done)](#AccountDocument.acceptRequest)\r\n  * [AccountDocument.denyRequest(requesterId, done)](#AccountDocument.denyRequest)\r\n  * [AccountDocument.getFriends(done)](#AccountDocument.getFriends)\r\n  * [AccountDocument.getFriendsOfFriends(done)](#AccountDocument.getFriendsOfFriends)\r\n  * [AccountDocument.getNonFriends(done)](#AccountDocument.getNonFriends)\r\n  * [AccountDocument.isFriend(accountId, done)](#AccountDocument.isFriend)\r\n  * [AccountDocument.isFriendOfFriends(accountId, done)](#AccountDocument.isFriendOfFriends)\r\n  * [AccountDocument.getFriendship(accountId, done)](#AccountDocument.getFriendship)\r\n  * [AccountDocument.getRelationship(accountId, done)](#AccountDocument.getRelationship)\r\n \r\n<a name=\"FriendshipModel\"></a>\r\n#class: FriendshipModel\r\n**Members**\r\n\r\n* [class: FriendshipModel](#FriendshipModel)\r\n  * [FriendshipModel.relationships](#FriendshipModel.relationships)\r\n  * [FriendshipModel.getRequests(accountId, done)](#FriendshipModel.getRequests)\r\n  * [FriendshipModel.getSentRequests(accountId, done)](#FriendshipModel.getSentRequests)\r\n  * [FriendshipModel.getReceivedRequests(accountId, done)](#FriendshipModel.getReceivedRequests)\r\n  * [FriendshipModel.acceptRequest(requesterId, requestedId, done)](#FriendshipModel.acceptRequest)\r\n  * [FriendshipModel.denyRequest(requesterId, requestedId, done)](#FriendshipModel.denyRequest)\r\n  * [FriendshipModel.getFriends(accountId, done)](#FriendshipModel.getFriends)\r\n  * [FriendshipModel.getFriendsOfFriends(accountId, done)](#FriendshipModel.getFriendsOfFriends)\r\n  * [FriendshipModel.areFriends(accountId1, accountId2, done)](#FriendshipModel.areFriends)\r\n  * [FriendshipModel.areFriendsOfFriends(accountId1, accountId2, done)](#FriendshipModel.areFriendsOfFriends)\r\n  * [FriendshipModel.getRelationship(accountId1, accountId2, done)](#FriendshipModel.getRelationship)\r\n  * [FriendshipModel.isRequester(friendshipId, accountId, done)](#FriendshipModel.isRequester)\r\n  * [FriendshipModel.isRequested(friendshipId, accountId, done)](#FriendshipModel.isRequested)\r\n\r\n<a name=\"FriendshipModel.relationships\"></a>\r\n##FriendshipModel.relationships\r\ndefault relationship constants\r\n\r\n**Type**: `Object`  \r\n<a name=\"FriendshipModel.getRequests\"></a>\r\n##FriendshipModel.getRequests(accountId, done)\r\nget all friend requests involving a given user\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user  \r\n- done `function` - required callback, passed requests retrieved  \r\n\r\n<a name=\"FriendshipModel.getSentRequests\"></a>\r\n##FriendshipModel.getSentRequests(accountId, done)\r\nget requests the given user has sent\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user  \r\n- done `function` - required callback, passed sent requests retrieved  \r\n\r\n<a name=\"FriendshipModel.getReceivedRequests\"></a>\r\n##FriendshipModel.getReceivedRequests(accountId, done)\r\nget requests received by the given user\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user  \r\n- done `function` - required callback, passed received requests retrieved  \r\n\r\n<a name=\"FriendshipModel.acceptRequest\"></a>\r\n##FriendshipModel.acceptRequest(requesterId, requestedId, done)\r\naccept a friend request\r\n\r\n**Params**\r\n\r\n- requesterId `ObjectId` - the _id of the requester of friendship  \r\n- requestedId `ObjectId` - the _id of the user whose friendship was requested  \r\n- done `function` - required callback, passed the populated friendship accepted  \r\n\r\n<a name=\"FriendshipModel.denyRequest\"></a>\r\n##FriendshipModel.denyRequest(requesterId, requestedId, done)\r\ndeny a friend request\r\n\r\n**Params**\r\n\r\n- requesterId `ObjectId` - the _id of the requester of friendship  \r\n- requestedId `ObjectId` - the _id of the user whose friendship was requested  \r\n- done `function` - required callback, passed the denied friendship  \r\n\r\n<a name=\"FriendshipModel.getFriends\"></a>\r\n##FriendshipModel.getFriends(accountId, done)\r\nget a list ids of friends of an account\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback, passed an array of friendIds  \r\n\r\n<a name=\"FriendshipModel.getFriendsOfFriends\"></a>\r\n##FriendshipModel.getFriendsOfFriends(accountId, done)\r\nget friendIds of this account's friends\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback, passed an array of friendsOfFriends  \r\n\r\n<a name=\"FriendshipModel.areFriends\"></a>\r\n##FriendshipModel.areFriends(accountId1, accountId2, done)\r\ndetermine if accountId1 and accountId2 are friends\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account1  \r\n- accountId2 `ObjectId` - the _id of account2  \r\n- done `function` - required callback, passed a boolean determination  \r\n\r\n<a name=\"FriendshipModel.areFriendsOfFriends\"></a>\r\n##FriendshipModel.areFriendsOfFriends(accountId1, accountId2, done)\r\ndetermine if accountId1 and accountId2 have any common friends\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account1  \r\n- accountId2 `ObjectId` - the _id of account2  \r\n- done `function` - required callback, passed a boolean determination  \r\n\r\n<a name=\"FriendshipModel.getRelationship\"></a>\r\n##FriendshipModel.getRelationship(accountId1, accountId2, done)\r\nget the numeric relationship of two accounts\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account 1  \r\n- accountId2 `ObjectId` - the _id of account 2  \r\n- done `function` - required callback  \r\n\r\n<a name=\"FriendshipModel.isRequester\"></a>\r\n##FriendshipModel.isRequester(friendshipId, accountId, done)\r\ncheck to see if the given user is the requester in a given friendship\r\n\r\n**Params**\r\n\r\n- friendshipId `ObjectId` - the _id of the friendship document  \r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback  \r\n\r\n<a name=\"FriendshipModel.isRequested\"></a>\r\n##FriendshipModel.isRequested(friendshipId, accountId, done)\r\ncheck to see if the given user is the requested in a given friendship\r\n\r\n**Params**\r\n\r\n- friendshipId `ObjectId` - the _id of the friendship  \r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback  \r\n\r\n<a name=\"FriendshipDocument\"></a>\r\n#class: FriendshipDocument\r\n**Members**\r\n\r\n* [class: FriendshipDocument](#FriendshipDocument)\r\n  * [FriendshipDocument.isRequester(accountId, done)](#FriendshipDocument.isRequester)\r\n  * [FriendshipDocument.isRequested(accountId, done)](#FriendshipDocument.isRequested)\r\n\r\n<a name=\"FriendshipDocument.isRequester\"></a>\r\n##FriendshipDocument.isRequester(accountId, done)\r\ncheck to see if the given user is the requester in this relationship\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback  \r\n\r\n<a name=\"FriendshipDocument.isRequested\"></a>\r\n##FriendshipDocument.isRequested(accountId, done)\r\ncheck to see if the given user is the requested in this relationship\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback  \r\n\r\n<a name=\"FriendsOfFriends\"></a>\r\n#class: FriendsOfFriends\r\n**Members**\r\n\r\n* [class: FriendsOfFriends](#FriendsOfFriends)\r\n  * [new FriendsOfFriends(options)](#new_FriendsOfFriends)\r\n  * [FriendsOfFriends.options](#FriendsOfFriends.options)\r\n  * [FriendsOfFriends.friendship](#FriendsOfFriends.friendship)\r\n  * [FriendsOfFriends.relationships](#FriendsOfFriends.relationships)\r\n  * [FriendsOfFriends.plugin(schema, options)](#FriendsOfFriends.plugin)\r\n  * [friendsOfFriends.get(property)](#FriendsOfFriends#get)\r\n  * [friendsOfFriends.set(property, value)](#FriendsOfFriends#set)\r\n\r\n<a name=\"new_FriendsOfFriends\"></a>\r\n##new FriendsOfFriends(options)\r\nCreates a new FriendsOfFriends Object with or without new\r\n```javascript\r\nvar options = { \r\n    accountName:             'Player',\r\n    accountCollection:       'foo_userAccounts',\r\n    friendshipName:          'Friend_Relationships', \r\n    friendshipCollection:    'bar_userRelationships',\r\n};\r\n\r\nvar FriendsOfFriends = require('friends-of-friends')();\r\n// or\r\nvar FriendsOfFriends = require('friends-of-friends');\r\nvar fof = new FriendsOfFriends(options);\r\n```\r\n\r\n**Params**\r\n\r\n- options `Object` - optional object containing configurable options  \r\n\r\n<a name=\"FriendsOfFriends.options\"></a>\r\n##FriendsOfFriends.options\r\nThe options defined for the module instance\r\n\r\n**Properties**\r\n\r\n- accountName `String` - The name to call the model to be compiled from the Account Schema. Default: `'Account'`  \r\n- FriendshipName `String` - The name to call the model to be compiled from the Friendship Schema. Default: `'Friendship'`  \r\n\r\n**Type**: `Object`  \r\n<a name=\"FriendsOfFriends.friendship\"></a>\r\n##FriendsOfFriends.friendship\r\nThe Friendship model\r\n\r\n**Type**: `Model`  \r\n<a name=\"FriendsOfFriends.relationships\"></a>\r\n##FriendsOfFriends.relationships\r\nRelationship constants\r\n\r\n**Properties**\r\n\r\n- 0 `String` - Value: `'NOT_FRIENDS'`  \r\n- 1 `String` - Value: `'FRIENDS_OF_FRIENDS'`  \r\n- 2 `String` - Value: `'FRIENDS'`  \r\n- NOT_FRIENDS `Number` - Value: `0`  \r\n- FRIENDS_OF_FRIENDS `Number` - Value: `1`  \r\n- FRIENDS `Number` - Value: `2`  \r\n\r\n**Type**: `Object`  \r\n<a name=\"FriendsOfFriends.plugin\"></a>\r\n##FriendsOfFriends.plugin(schema, options)\r\nAdds friends-of-friends functionality to an existing Schema\r\n\r\n**Params**\r\n\r\n- schema `Schema` - The mongoose Schema that gets plugged  \r\n- options `Object` - Options passed to the plugin  \r\n\r\n<a name=\"FriendsOfFriends#get\"></a>\r\n##friendsOfFriends.get(property)\r\nReturn the value of a property of `this.options`\r\n\r\n**Params**\r\n\r\n- property `String` - The property to get  \r\n\r\n**Returns**: `Mixed`  \r\n<a name=\"FriendsOfFriends#set\"></a>\r\n##friendsOfFriends.set(property, value)\r\nSet the value of a property of `this.options`\r\n\r\n**Params**\r\n\r\n- property `String` - The name of the Property  \r\n- value `Mixed` - The new value of the property  \r\n\r\n**Returns**: `Mixed`  \r\n<a name=\"AccountModel\"></a>\r\n#class: AccountModel\r\n**Members**\r\n\r\n* [class: AccountModel](#AccountModel)\r\n  * [AccountModel.getFriendship(accountId1, accountId2, done)](#AccountModel.getFriendship)\r\n  * [AccountModel.friendRequest(requesterId, requested_Id, done)](#AccountModel.friendRequest)\r\n  * [AccountModel.getRequests(accountId, done)](#AccountModel.getRequests)\r\n  * [AccountModel.getSentRequests(accountId, done)](#AccountModel.getSentRequests)\r\n  * [AccountModel.getReceivedRequests(accountId, done)](#AccountModel.getReceivedRequests)\r\n  * [AccountModel.acceptRequest(requesterId, requestedId, done)](#AccountModel.acceptRequest)\r\n  * [AccountModel.denyRequest(requesterId, requestedId, done)](#AccountModel.denyRequest)\r\n  * [AccountModel.endFriendship(accountId1, accountId2, done)](#AccountModel.endFriendship)\r\n  * [AccountModel.getFriends(accountId, done)](#AccountModel.getFriends)\r\n  * [AccountModel.getFriendsOfFriends(accountId, done)](#AccountModel.getFriendsOfFriends)\r\n  * [AccountModel.areFriends(accountId1, accountId2, done)](#AccountModel.areFriends)\r\n  * [AccountModel.areFriendsOfFriends(accountId1, accountId2, done)](#AccountModel.areFriendsOfFriends)\r\n  * [AccountModel.getFriendship(accountId1, accountId2, done)](#AccountModel.getFriendship)\r\n  * [AccountModel.getRelationship(accountId1, accountId2, done)](#AccountModel.getRelationship)\r\n  * [const: AccountModel.relationships](#AccountModel.relationships)\r\n\r\n<a name=\"AccountModel.getFriendship\"></a>\r\n##AccountModel.getFriendship(accountId1, accountId2, done)\r\nget the friendship document of two accounts\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account1  \r\n- accountId2 `ObjectId` - the _id of account2  \r\n- done `function` - required callback, passed err and a Friendship document, if found  \r\n\r\n<a name=\"AccountModel.friendRequest\"></a>\r\n##AccountModel.friendRequest(requesterId, requested_Id, done)\r\nsends a friend request to a another user\r\n\r\n**Params**\r\n\r\n- requesterId `ObjectId` - the ObjectId of the account sending the request  \r\n- requested_Id `ObjectId` - the ObjectId of the account to whom the request will be sent  \r\n- done `function` - required callback, passed the populated request  \r\n\r\n<a name=\"AccountModel.getRequests\"></a>\r\n##AccountModel.getRequests(accountId, done)\r\nget all friend requests for a given user\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user  \r\n- done `function` - required callback, passed requests retrieved  \r\n\r\n<a name=\"AccountModel.getSentRequests\"></a>\r\n##AccountModel.getSentRequests(accountId, done)\r\nget requests the given user has sent\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user  \r\n- done `function` - required callback, passed sent requests retrieved  \r\n\r\n<a name=\"AccountModel.getReceivedRequests\"></a>\r\n##AccountModel.getReceivedRequests(accountId, done)\r\nget requests received by the given user\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user  \r\n- done `function` - required callback, passed received requests retrieved  \r\n\r\n<a name=\"AccountModel.acceptRequest\"></a>\r\n##AccountModel.acceptRequest(requesterId, requestedId, done)\r\naccept a friend request\r\n\r\n**Params**\r\n\r\n- requesterId `ObjectId` - the _id of the requester of friendship  \r\n- requestedId `ObjectId` - the _id of the user whose friendship was requested  \r\n- done `function` - required callback, passed the populated friendship accepted  \r\n\r\n<a name=\"AccountModel.denyRequest\"></a>\r\n##AccountModel.denyRequest(requesterId, requestedId, done)\r\ndeny a friend request\r\n\r\n**Params**\r\n\r\n- requesterId `ObjectId` - the _id of the requester of friendship  \r\n- requestedId `ObjectId` - the _id of the user whose friendship was requested  \r\n- done `function` - required callback, passed the denied friendship  \r\n\r\n<a name=\"AccountModel.endFriendship\"></a>\r\n##AccountModel.endFriendship(accountId1, accountId2, done)\r\nend a friendship between two accounts\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account 1  \r\n- accountId2 `ObjectId` - the _id of account 2  \r\n- done `function` - required callback  \r\n\r\n<a name=\"AccountModel.getFriends\"></a>\r\n##AccountModel.getFriends(accountId, done)\r\nget all friends of an account\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback, passed an array of friends  \r\n\r\n<a name=\"AccountModel.getFriendsOfFriends\"></a>\r\n##AccountModel.getFriendsOfFriends(accountId, done)\r\nget friends of this account's friends\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the account  \r\n- done `function` - required callback, passed an array of friendsOfFriends  \r\n\r\n<a name=\"AccountModel.areFriends\"></a>\r\n##AccountModel.areFriends(accountId1, accountId2, done)\r\ndetermine if accountId1 and accountId2 are friends\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account1  \r\n- accountId2 `ObjectId` - the _id of account2  \r\n- done `function` - required callback, passed a boolean determination  \r\n\r\n<a name=\"AccountModel.areFriendsOfFriends\"></a>\r\n##AccountModel.areFriendsOfFriends(accountId1, accountId2, done)\r\ndetermine if accountId1 and accountId2 have any common friends\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account1  \r\n- accountId2 `ObjectId` - the _id of account2  \r\n- done `function` - required callback, passed a boolean determination  \r\n\r\n<a name=\"AccountModel.getFriendship\"></a>\r\n##AccountModel.getFriendship(accountId1, accountId2, done)\r\nget the friendship document itself\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account1  \r\n- accountId2 `ObjectId` - the _id of account2  \r\n- done `function` - required callback, passed err and a Friendship document, if found  \r\n\r\n<a name=\"AccountModel.getRelationship\"></a>\r\n##AccountModel.getRelationship(accountId1, accountId2, done)\r\nget the numeric relationship between two users\r\n\r\n**Params**\r\n\r\n- accountId1 `ObjectId` - the _id of account1  \r\n- accountId2 `ObjectId` - the _id of account2  \r\n- done `function` - required callback, passed err and a Relationship value  \r\n\r\n<a name=\"AccountModel.relationships\"></a>\r\n##const: AccountModel.relationships\r\ndefault relationship constants\r\n\r\n**Type**: `Object`  \r\n<a name=\"AccountDocument\"></a>\r\n#class: AccountDocument\r\n**Members**\r\n\r\n* [class: AccountDocument](#AccountDocument)\r\n  * [new AccountDocument()](#new_AccountDocument)\r\n  * [AccountDocument.friendRequest(requestedId, done)](#AccountDocument.friendRequest)\r\n  * [AccountDocument.getRequests(done)](#AccountDocument.getRequests)\r\n  * [AccountDocument.getSentRequests(done)](#AccountDocument.getSentRequests)\r\n  * [AccountDocument.getReceivedRequests(done)](#AccountDocument.getReceivedRequests)\r\n  * [AccountDocument.acceptRequest(requesterId, done)](#AccountDocument.acceptRequest)\r\n  * [AccountDocument.denyRequest(requesterId, done)](#AccountDocument.denyRequest)\r\n  * [AccountDocument.getFriends(done)](#AccountDocument.getFriends)\r\n  * [AccountDocument.getFriendsOfFriends(done)](#AccountDocument.getFriendsOfFriends)\r\n  * [AccountDocument.getNonFriends(done)](#AccountDocument.getNonFriends)\r\n  * [AccountDocument.isFriend(accountId, done)](#AccountDocument.isFriend)\r\n  * [AccountDocument.isFriendOfFriends(accountId, done)](#AccountDocument.isFriendOfFriends)\r\n  * [AccountDocument.getFriendship(accountId, done)](#AccountDocument.getFriendship)\r\n  * [AccountDocument.getRelationship(accountId, done)](#AccountDocument.getRelationship)\r\n\r\n<a name=\"new_AccountDocument\"></a>\r\n##new AccountDocument()\r\nDocument-accessible properties and methods\r\n\r\nthese instance methods are aliases of the Model statics as they apply to each document\r\n\r\nexample:\r\n```javascript\r\n var jeff = new User({ username: \"Jeff\" });\r\n user.sendRequest(requestedEmail, function (err, request) {...})\r\n```\r\n\r\n<a name=\"AccountDocument.friendRequest\"></a>\r\n##AccountDocument.friendRequest(requestedId, done)\r\nsend a request to another account\r\n\r\n**Params**\r\n\r\n- requestedId `ObjectId` - the _id of the account to whom the request will be sent  \r\n- done `function` - required callback, passed the populated request sent  \r\n\r\n<a name=\"AccountDocument.getRequests\"></a>\r\n##AccountDocument.getRequests(done)\r\nget friend requests\r\n\r\n**Params**\r\n\r\n- done `function` - required callback, passed the populated requests retrieved  \r\n\r\n<a name=\"AccountDocument.getSentRequests\"></a>\r\n##AccountDocument.getSentRequests(done)\r\nget friend requests the user has sent\r\n\r\n**Params**\r\n\r\n- done `function` - required callback, passed the populated requests retrieved  \r\n\r\n<a name=\"AccountDocument.getReceivedRequests\"></a>\r\n##AccountDocument.getReceivedRequests(done)\r\nget friend requests the user has received\r\n\r\n**Params**\r\n\r\n- done `function` - required callback, passed the populated requests retrieved  \r\n\r\n<a name=\"AccountDocument.acceptRequest\"></a>\r\n##AccountDocument.acceptRequest(requesterId, done)\r\naccept a friend request received from the specified user\r\n\r\n**Params**\r\n\r\n- requesterId `ObjectId` - the _id of the account from whom the request was received  \r\n- done `function` - required callback, passed the populated request that was accepted  \r\n\r\n<a name=\"AccountDocument.denyRequest\"></a>\r\n##AccountDocument.denyRequest(requesterId, done)\r\ndeny a friend request received from the specified user\r\n\r\n**Params**\r\n\r\n- requesterId `ObjectId` - the _id of the account from whom the request was received  \r\n- done `function` - required callback, passed the populated request that was denied  \r\n\r\n<a name=\"AccountDocument.getFriends\"></a>\r\n##AccountDocument.getFriends(done)\r\nget this document's friends\r\n\r\n**Params**\r\n\r\n- done `function` - required callback, passed an array of friends  \r\n\r\n<a name=\"AccountDocument.getFriendsOfFriends\"></a>\r\n##AccountDocument.getFriendsOfFriends(done)\r\nget friends of this document's friends\r\n\r\n**Params**\r\n\r\n- done `function` - required callback, passed an array of friendsOfFriends  \r\n\r\n<a name=\"AccountDocument.getNonFriends\"></a>\r\n##AccountDocument.getNonFriends(done)\r\nget accounts which are not this document's friends\r\n\r\n**Params**\r\n\r\n- done `function` - required callback, passed an array of friendsOfFriends  \r\n\r\n<a name=\"AccountDocument.isFriend\"></a>\r\n##AccountDocument.isFriend(accountId, done)\r\ndetermine if this document is friends with the specified account\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user to check for friendship  \r\n- done `function` - required callback, passed a boolean determination  \r\n\r\n<a name=\"AccountDocument.isFriendOfFriends\"></a>\r\n##AccountDocument.isFriendOfFriends(accountId, done)\r\ndetermine if this document shares any friends with the specified account\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the user to check for friendship  \r\n- done `function` - required callback, passed a boolean determination  \r\n\r\n<a name=\"AccountDocument.getFriendship\"></a>\r\n##AccountDocument.getFriendship(accountId, done)\r\nget the friendship document of this document and the specified account\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the friend  \r\n- done `function` - required callback, passed the populated friendship  \r\n\r\n<a name=\"AccountDocument.getRelationship\"></a>\r\n##AccountDocument.getRelationship(accountId, done)\r\nget the relationship of this document and the specified account\r\n\r\n**Params**\r\n\r\n- accountId `ObjectId` - the _id of the friend  \r\n- done `function` - required callback, passed the relationship value  \r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}